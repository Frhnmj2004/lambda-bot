// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v6.32.0--rc1
// source: proto/lambda.proto

package protogen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AudioProcessorClient is the client API for AudioProcessor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AudioProcessorClient interface {
	TranscribeAudio(ctx context.Context, in *TranscriptionRequest, opts ...grpc.CallOption) (*TranscriptionResponse, error)
}

type audioProcessorClient struct {
	cc grpc.ClientConnInterface
}

func NewAudioProcessorClient(cc grpc.ClientConnInterface) AudioProcessorClient {
	return &audioProcessorClient{cc}
}

func (c *audioProcessorClient) TranscribeAudio(ctx context.Context, in *TranscriptionRequest, opts ...grpc.CallOption) (*TranscriptionResponse, error) {
	out := new(TranscriptionResponse)
	err := c.cc.Invoke(ctx, "/proto.AudioProcessor/TranscribeAudio", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AudioProcessorServer is the server API for AudioProcessor service.
// All implementations must embed UnimplementedAudioProcessorServer
// for forward compatibility
type AudioProcessorServer interface {
	TranscribeAudio(context.Context, *TranscriptionRequest) (*TranscriptionResponse, error)
	mustEmbedUnimplementedAudioProcessorServer()
}

// UnimplementedAudioProcessorServer must be embedded to have forward compatible implementations.
type UnimplementedAudioProcessorServer struct {
}

func (UnimplementedAudioProcessorServer) TranscribeAudio(context.Context, *TranscriptionRequest) (*TranscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TranscribeAudio not implemented")
}
func (UnimplementedAudioProcessorServer) mustEmbedUnimplementedAudioProcessorServer() {}

// UnsafeAudioProcessorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AudioProcessorServer will
// result in compilation errors.
type UnsafeAudioProcessorServer interface {
	mustEmbedUnimplementedAudioProcessorServer()
}

func RegisterAudioProcessorServer(s grpc.ServiceRegistrar, srv AudioProcessorServer) {
	s.RegisterService(&AudioProcessor_ServiceDesc, srv)
}

func _AudioProcessor_TranscribeAudio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TranscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudioProcessorServer).TranscribeAudio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AudioProcessor/TranscribeAudio",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudioProcessorServer).TranscribeAudio(ctx, req.(*TranscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AudioProcessor_ServiceDesc is the grpc.ServiceDesc for AudioProcessor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AudioProcessor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AudioProcessor",
	HandlerType: (*AudioProcessorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TranscribeAudio",
			Handler:    _AudioProcessor_TranscribeAudio_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/lambda.proto",
}

// TextSummarizerClient is the client API for TextSummarizer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TextSummarizerClient interface {
	SummarizeText(ctx context.Context, in *SummarizationRequest, opts ...grpc.CallOption) (*SummarizationResponse, error)
}

type textSummarizerClient struct {
	cc grpc.ClientConnInterface
}

func NewTextSummarizerClient(cc grpc.ClientConnInterface) TextSummarizerClient {
	return &textSummarizerClient{cc}
}

func (c *textSummarizerClient) SummarizeText(ctx context.Context, in *SummarizationRequest, opts ...grpc.CallOption) (*SummarizationResponse, error) {
	out := new(SummarizationResponse)
	err := c.cc.Invoke(ctx, "/proto.TextSummarizer/SummarizeText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TextSummarizerServer is the server API for TextSummarizer service.
// All implementations must embed UnimplementedTextSummarizerServer
// for forward compatibility
type TextSummarizerServer interface {
	SummarizeText(context.Context, *SummarizationRequest) (*SummarizationResponse, error)
	mustEmbedUnimplementedTextSummarizerServer()
}

// UnimplementedTextSummarizerServer must be embedded to have forward compatible implementations.
type UnimplementedTextSummarizerServer struct {
}

func (UnimplementedTextSummarizerServer) SummarizeText(context.Context, *SummarizationRequest) (*SummarizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SummarizeText not implemented")
}
func (UnimplementedTextSummarizerServer) mustEmbedUnimplementedTextSummarizerServer() {}

// UnsafeTextSummarizerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TextSummarizerServer will
// result in compilation errors.
type UnsafeTextSummarizerServer interface {
	mustEmbedUnimplementedTextSummarizerServer()
}

func RegisterTextSummarizerServer(s grpc.ServiceRegistrar, srv TextSummarizerServer) {
	s.RegisterService(&TextSummarizer_ServiceDesc, srv)
}

func _TextSummarizer_SummarizeText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SummarizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextSummarizerServer).SummarizeText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TextSummarizer/SummarizeText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextSummarizerServer).SummarizeText(ctx, req.(*SummarizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TextSummarizer_ServiceDesc is the grpc.ServiceDesc for TextSummarizer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TextSummarizer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TextSummarizer",
	HandlerType: (*TextSummarizerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SummarizeText",
			Handler:    _TextSummarizer_SummarizeText_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/lambda.proto",
}

// OrchestratorClient is the client API for Orchestrator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrchestratorClient interface {
	ProcessVoiceMessage(ctx context.Context, in *ProcessRequest, opts ...grpc.CallOption) (*ProcessResponse, error)
}

type orchestratorClient struct {
	cc grpc.ClientConnInterface
}

func NewOrchestratorClient(cc grpc.ClientConnInterface) OrchestratorClient {
	return &orchestratorClient{cc}
}

func (c *orchestratorClient) ProcessVoiceMessage(ctx context.Context, in *ProcessRequest, opts ...grpc.CallOption) (*ProcessResponse, error) {
	out := new(ProcessResponse)
	err := c.cc.Invoke(ctx, "/proto.Orchestrator/ProcessVoiceMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrchestratorServer is the server API for Orchestrator service.
// All implementations must embed UnimplementedOrchestratorServer
// for forward compatibility
type OrchestratorServer interface {
	ProcessVoiceMessage(context.Context, *ProcessRequest) (*ProcessResponse, error)
	mustEmbedUnimplementedOrchestratorServer()
}

// UnimplementedOrchestratorServer must be embedded to have forward compatible implementations.
type UnimplementedOrchestratorServer struct {
}

func (UnimplementedOrchestratorServer) ProcessVoiceMessage(context.Context, *ProcessRequest) (*ProcessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessVoiceMessage not implemented")
}
func (UnimplementedOrchestratorServer) mustEmbedUnimplementedOrchestratorServer() {}

// UnsafeOrchestratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrchestratorServer will
// result in compilation errors.
type UnsafeOrchestratorServer interface {
	mustEmbedUnimplementedOrchestratorServer()
}

func RegisterOrchestratorServer(s grpc.ServiceRegistrar, srv OrchestratorServer) {
	s.RegisterService(&Orchestrator_ServiceDesc, srv)
}

func _Orchestrator_ProcessVoiceMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).ProcessVoiceMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Orchestrator/ProcessVoiceMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).ProcessVoiceMessage(ctx, req.(*ProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Orchestrator_ServiceDesc is the grpc.ServiceDesc for Orchestrator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Orchestrator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Orchestrator",
	HandlerType: (*OrchestratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessVoiceMessage",
			Handler:    _Orchestrator_ProcessVoiceMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/lambda.proto",
}
